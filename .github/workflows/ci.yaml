# This workflow will build and test the C++Sparse library and the associated
# Python package. It relies on the makefile to call CMake for building the C++
# code and the pybind11 package.
name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # continue testing other OSes even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pybind11
        run: |
          pip install --upgrade pip
          pip install pybind11

      - name: Check python versions
        run: |
          which python
          python --version
          which python3
          python3 --version

      - name: Configure CMake (Linux/MacOS)
        run: |
          mkdir -p build
          cmake -S . -B build \
            -DCMAKE_PREFIX_PATH="$(python -m pybind11 --cmakedir)"

      - name: Build C++ Code
        run: |
          cmake --build build -j8 --target test_csparse

      - name: Run C++ unit tests
        run: |
          ./test_csparse

      - name: Build and Install Python C++ module
        run: |
          cmake --build build -j8 --target csparse
          cmake --install build

      - name: Install Python dependencies and csparse module
        run: |
          pip install -e "${{ github.workspace }}/python[dev]"
          ls -l python/csparse

      - name: List csparse package directory after install
        run: |
          ls -l "$(python -c 'import csparse; print(csparse.__path__[0])')"

      - name: Run Python unit tests with conditional reruns
        # TODO pytest --make-figures
        # pytest --last-failed (re-run with only the last failed tests)
        # env:
        #   MPLBACKEND: agg  # use headless backend for matplotlib
        continue-on-error: true
        id: pytest_full_run
        run: |
          #!/bin/bash
          # Run pytest in a subprocess in case it segfaults
          (bash -c "pytest")
          INITIAL_EXIT_CODE=$?

          echo "--- Initial pytest exit code $INITIAL_EXIT_CODE."

          # Check if the initial pytest run failed
          IGNORE_FILES='--ignore=python/csparse/tests/test_lu.py::TestLU'
          LAST_FAILED_FLAGS='-v -s --last-failed --tb=auto --showlocals'

          if [[ $INITIAL_EXIT_CODE -eq 139 ]]; then
              echo "--- Initial pytest run likely segfaulted (exit code 139)."
              echo "--- Attempting to re-run pytest skipping TestLU."
              pytest $IGNORE_FILES
              if [[ $? -ne 0 ]]; then
                  echo "--- Re-run: pytest still failed after skipping TestLU."
                  pytest $IGNORE_FILES $LAST_FAILED_FLAGS
              fi
          elif [[ $INITIAL_EXIT_CODE -ne 0 ]]; then
              echo "--- Initial pytest failed: exit code $INITIAL_EXIT_CODE."
              pytest $LAST_FAILED_FLAGS
          fi

      - name: Check for pytest run outcome
        if: steps.pytest_full_run.outcome == 'failure'
        run: |
          echo "::error::Pytest run failed or encountered an error."
          exit 1  # explicitly fail the job

      - name: Build C++ Demos
        run: |
          cmake --build build -j8 --target demo1 demo2 demo3

      - name: Run C++ Demos
        run: |
          ./demo1 './data/t1'
          ./demo2 './data/t1'
          ./demo2 './data/ash219'
          ./demo2 './data/bcsstk01'
          ./demo2 './data/fs_183_1'
          ./demo2 './data/mbeacxc'
          ./demo2 './data/west0067'
          ./demo2 './data/lp_afiro'
          ./demo2 './data/bcsstk16'
          ./demo3 './data/bcsstk01'
          ./demo3 './data/bcsstk16'
