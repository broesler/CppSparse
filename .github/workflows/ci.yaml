# This workflow will build and test the C++Sparse library and the associated
# Python package. It relies on the makefile to call CMake for building the C++
# code and the pybind11 package.
name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # continue testing other OSes even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Install pybind11
        run: |
          python -m pip install --upgrade pip
          pip install pybind11

      - name: Configure CMake (Linux/MacOS)
        run: |
          mkdir -p build
          cmake -S . -B build -DCMAKE_PREFIX_PATH="$(python -m pybind11 --cmakedir)"

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir -p build
          $cmakedir = python -m pybind11 --cmakedir
          cmake -S . -B build -DCMAKE_PREFIX_PATH="$cmakedir"

      - name: Build and Test C++ Code
        run: |
          cmake --build build --target test_csparse
          ./test_csparse

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build and Install Python C++ module
        run: |
          cmake --build build --target csparse
          cmake --install build

      - name: List build directory
        run: |
          ls -l build/

      - name: Verify csparse module installation
        run: |
          ls -l python/csparse/

      - name: Install Python dependencies and csparse module
        run: |
          pip install --upgrade pip
          pip install -e "${{ github.workspace }}/python[dev]"
          ls -l python/csparse

      - name: List csparse package directory after install
        run: |
          ls -l "$(python -c 'import csparse; print(csparse.__path__[0])')"

      - name: Run Python unit tests
        # TODO pytest --make-figures
        # env:
        #   MPLBACKEND: agg  # use headless backend for matplotlib
        run: |
          pytest
